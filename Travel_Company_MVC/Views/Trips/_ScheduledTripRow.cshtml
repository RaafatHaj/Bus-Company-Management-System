
@using System.Globalization
@model ScheduledTripViewModel;






<tr  >


    <td >

        <div class="m-0 d-flex">


            <i class="ki-duotone fw-semibold  ki-black-up   fs-1 mt-1 ">  </i>

            <div>

                <div class="">

                    <span class="text-gray-900 fw-bold d-block fs-3">
                         @DateTime.Today.Add(Model.Time).ToString("HH:mm")
                        <span class="text-muted fw-semibold fs-7">
                            @(Model.Time > new TimeSpan(12, 0, 0) ? "Pm" : "Am")
                        </span>
                        <span class="text-primary fw-normal  fs-6  ">@Model.Date.ToString("ddd")</span>
                    </span>



                </div>

                <div class="text-muted fw-semibold fs-7 ">
                    <span class="text-primary fs-5">
                        @Model.Date.ToString("dd")
                    </span>
                    @Model.Date.ToString("MMM")
                    @Model.Date.ToString("yyyy").
                </div>
            </div>



        </div>



     @*    <!--begin::Item-->
        <div class="m-0 d-flex">


            <i class="ki-duotone fw-semibold  ki-black-up fs-1 ">  </i>

            <!--begin::Label-->
            <!--begin::Title-->
            <div>



                <a href="#"
                   class="text-gray-900 fw-bold d-block text-hover-primary me-2">@Model.Date.ToString("dd MMM yyyy", CultureInfo.InvariantCulture)</a>
                <div class="d-flex gap-2 mt-1">

                    <span class="text-muted fw-semibold fs-7 testtt">
                        @DateTime.Today.Add(Model.Time).ToString("HH:mm")
                        @(Model.Time > new TimeSpan(12, 0, 0) ? "Pm" : "Am")
                    </span>
                    <span class="text-primary">@Model.Date.ToString("ddd")</span>


                </div>

            </div>
     



        </div>
        <!--end::Item-->
 *@

    </td>
    <td>
        <div>

            <div class="d-flex gap-2">
           
                <span class="text-gray-900 fw-bold d-block ">
                    @Model.RouteName

                </span>



            </div>

            <div class="text-muted fw-semibold fs-7 ">
                <span class="text-primary">
                    350
                </span>
                km.
            </div>
        </div>
    </td>
    <td>



        <div class="d-flex mb-2">

            @{
                string color="";
                if (Model.Status == TripStatus.Unassigned)
                    color = "badge-light";
                else if (Model.Status == TripStatus.Pending)
                    color = "badge-light-warning";
                else if (Model.Status == TripStatus.Active)
                    color = "badge-light-success";
                else if (Model.Status == TripStatus.Canseled)
                    color = "badge-light-danger";
                else if (Model.Status == TripStatus.Complete)
                    color = "badge-light-primary";

            }
            <div class=" badge    @color ">@Model.Status</div>


        </div>
        <!--end::Item-->

    </td>

    @if(Model.ReturnTripId==null)
    {
        <td>

            <div class="text-muted fw-semibold fs-7 ms-6">
            <span class="">
                    No Return Trip

            </span>




            </div>
        </td>
        <td></td>

    }
    else
    {
        <td>

            <div class="m-0 d-flex">


                <i class="ki-duotone fw-semibold  ki-black-down   fs-1 mt-1 ">  </i>

                <div>

                    <div class="">

                        <span class="text-gray-900 fw-bold d-block fs-3">
                            @DateTime.Today.Add(Model.ReturnTime!.Value).ToString("HH:mm")
                            <span class="text-muted fw-semibold fs-7">
                                @(Model.ReturnTime!.Value > new TimeSpan(12, 0, 0) ? "Pm" : "Am")
                            </span>
                            <span class="text-primary fw-normal  fs-6  ">@Model.ReturnDate!.Value.ToString("ddd")</span>
                        </span>



                    </div>

                    <div class="text-muted fw-semibold fs-7 ">
                        <span class="text-primary fs-5">
                            @Model.ReturnDate!.Value.ToString("dd")
                        </span>
                        @Model.ReturnDate!.Value.ToString("MMM")
                        @Model.ReturnDate!.Value.ToString("yyyy").
                    </div>
                </div>



            </div>



        @*
        <!--begin::Item-->
        <div class="m-0 d-flex">

        <i class="ki-duotone fw-semibold  ki-black-down fs-1 ">  </i>



        <div>
        <a href="#"
        class="text-gray-900 fw-bold d-block text-hover-primary me-2">@Model.ReturnDate?.ToString("dd MMM yyyy", CultureInfo.InvariantCulture)</a>
        <div class="d-flex gap-2 mt-1">

        <span class="text-muted fw-semibold fs-7">
        @DateTime.Today.Add(Model.ReturnTime!.Value).ToString("HH:mm")
        @(Model.ReturnTime!.Value > new TimeSpan(12, 0, 0) ? "Pm" : "Am")
        </span>
        <span class="text-primary">@Model.ReturnDate?.ToString("ddd")</span>


        </div>

        </div>

        </div>
        <!--end::Item-->
        *@
       
        </td>
        <td>



            <div class="d-flex mb-2">
                @{
                    string color2 = "";
                    if (Model.ReturnStatus == TripStatus.Unassigned)
                        color2 = "badge-light";
                    else if (Model.ReturnStatus == TripStatus.Pending)
                        color2 = "badge-light-warning";
                    else if (Model.ReturnStatus == TripStatus.Active)
                        color2 = "badge-light-primary";
                    else if (Model.ReturnStatus == TripStatus.Canseled)
                        color2 = "badge-light-danger";
                    else if (Model.ReturnStatus == TripStatus.Complete)
                        color2 = "badge-light-success";

                }
                <div class=" badge  fw-semibold @color2 ">@Model.ReturnStatus</div>


            </div>
            <!--end::Item-->

        </td>

    }
    <td>

    @if(Model.VehicleId is not null)
        {
            <div class="d-flex gap-1">

                <div>
                    <i class="ki-solid ki-verify text-warning   "></i>

                </div>


                <div>
                    <a href="#" class="text-gray-800 fw-bold d-block fs-7 text-hover-primary">
                        @Model.VehicleNumber
                    </a>
                    <span class="text-gray-500 fs-7 fw-semibold ">
                        @Model.VehicleModel
                    </span>
                </div>


            </div>

        }
        else
        {



            var returnTripDateTime = Model.ReturnDate != null ? Model.ReturnDate.Value.Add(Model.ReturnTime!.Value).ToString("yyyy-MM-dd HH:mm") : null;
            var tripDateTie = Model.Date.Add(Model.Time).ToString("yyyy-MM-dd HH:mm");

            <div>
                <a href="#" class="text-muted fw-semibold fs-7 text-hover-primary js-render-modal"
                   data-url="/Vehicles/GetAvailableVehicles?tripDateTime=@tripDateTie&returnTripDateTime=@returnTripDateTime&tripId=@Model.TripId"
                   data-large-modal="true"
                   data-title="Availavle Vehicles"
                   data-sub-title="all vehicles existed in the station at trip time."
                   data-updete="true"
                   data-table-id="Scheduled_Trips_Table">
                   <span class="ms-5">
                        No Vehicle
                   </span>
                </a>
            </div>
        }


      
   <!--




       






   
   
   
   -->


   

    </td>

    <td>

        <div class="d-flex justify-content-start flex-shrink-0">

            <a class="btn btn-icon btn-bg-light btn-active-color-primary btn-sm me-1 js-table-chiled"
               data-url="/Trips/GetTripEditingForm?tripId=@Model.TripId"
               data-callback="HandleTripEditingChild">
                <i class="ki-duotone ki-pencil fs-2">
                    <span class="path1"></span> 
                    <span class="path2"></span>
                </i>
            </a>
            <a class="btn btn-icon btn-bg-light btn-active-color-danger btn-sm">
                <i class="ki-duotone ki-trash fs-2">
                    <span class="path1"></span>
                    <span class="path2"></span>
                    <span class="path3"></span>
                    <span class="path4"></span>
                    <span class="path5"></span>
                </i>
            </a>
        </div>

    </td>


</tr>


